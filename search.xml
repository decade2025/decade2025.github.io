<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>面试官：说出100个常用的Linux命令！</title>
      <link href="/decade2025/decade2025.github.io.git/2021/04/14/%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E8%AF%B4%E5%87%BA100%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84Linux%E5%91%BD%E4%BB%A4%EF%BC%81/"/>
      <url>/decade2025/decade2025.github.io.git/2021/04/14/%E9%9D%A2%E8%AF%95%E5%AE%98%EF%BC%9A%E8%AF%B4%E5%87%BA100%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84Linux%E5%91%BD%E4%BB%A4%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/decade2025/decade2025.github.io.git/assets/css/APlayer.min.css"><script src="/decade2025/decade2025.github.io.git/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前几天发了<a href="https://www.modb.pro/db/26274">面试官：说出10个常用的Linux命令！</a>，朋友评论说让我再发10个，OK，我去特意复习总结了一下，再来“100“个！</p><p>在日常开发过程中，Linux命令是必不可少的，但是很多像我这样的新手，面对那么多的命令，很难一下记住，然后每次不知道该用啥命令，就去搜索，有时候会搜很久，很浪费时间，所以，参考和搜索了很多教程，分类总结汇总了如下常用命令，方便查询使用！</p><ul>    <li><a href="#1">一、Linux目录结构</a></li>    <li><a href="#2">二、Linux常用操作</a></li>        <ul>            <li><a href="#2_1">1、文件&目录操作</a></li>            <li><a href="#2_2">2、权限管理</a></li>        <li><a href="#2_3">3、查找</a></li>        <li><a href="#2_4">4、压缩包管理</a></li>        <li><a href="#2_5">5、进程管理</a></li>        <li><a href="#2_6">6、网络管理</a></li>        <li><a href="#2_7">7、用户管理</a></li>        <li><a href="#2_8">8、其他</a></li>        </ul>    <li><a href="#3">三、Vim常用命令</a></li></ul><h2 style="color:#0090ff"><a id=1></a>一、Linux目录结构</h2><hr><p><img src="https://obs-emcsapp-public.obs.cn-north-4.myhwclouds.com/image%2Feditor%2Ff084513b-9d9b-4de6-86e0-e04c6e57e81e.png" alt="image.png"></p><h2 style="color:#0090ff"><a id=2></a>二、Linux常用操作</h2><hr><h3 style="color:#0090ff"><a id=2_1></a>1、文件&目录操作</h3><hr><p><img src="https://obs-emcsapp-public.obs.cn-north-4.myhwclouds.com/image%2Feditor%2F26bf2c59-a6a2-42fd-80de-0d7b4ac439bc.png" alt="image.png"></p><h3 style="color:#0090ff"><a id=2_2></a>2、权限管理</h3><hr><p><img src="https://obs-emcsapp-public.obs.cn-north-4.myhwclouds.com/image%2Feditor%2Fcd7458df-dd42-4e77-b5dd-af506819a083.png" alt="image.png"></p><h3 style="color:#0090ff"><a id=2_3></a>3、查找</h3><hr><p><img src="https://obs-emcsapp-public.obs.cn-north-4.myhwclouds.com/image%2Feditor%2F271e6373-16c7-4ec8-911e-80c2cf149a0b.png" alt="image.png"></p><h3 style="color:#0090ff"><a id=2_4></a>4、压缩包管理</h3><hr><p><img src="https://obs-emcsapp-public.obs.cn-north-4.myhwclouds.com/image%2Feditor%2F74c59190-3d86-4cd5-85eb-74a870d9c0ff.png" alt="image.png"></p><h3 style="color:#0090ff"><a id=2_5></a>5、进程管理</h3><hr><p><img src="https://obs-emcsapp-public.obs.cn-north-4.myhwclouds.com/image%2Feditor%2F471602a3-7067-473f-90c7-cd5a74b16827.png" alt="image.png"></p><h3 style="color:#0090ff"><a id=2_6></a>6、网络管理</h3><hr><p><img src="https://obs-emcsapp-public.obs.cn-north-4.myhwclouds.com/image%2Feditor%2Fa5ac00e7-28d3-4bcd-8ced-3e474d306615.png" alt="image.png"></p><h3 style="color:#0090ff"><a id=2_7></a>7、用户管理</h3><hr><p><img src="https://obs-emcsapp-public.obs.cn-north-4.myhwclouds.com/image%2Feditor%2Fc25f7d77-82ff-4045-9c9c-79481ac6672c.png" alt="image.png"></p><h3 style="color:#0090ff"><a id=2_8></a>8、其他</h3><hr><p><img src="https://obs-emcsapp-public.obs.cn-north-4.myhwclouds.com/image%2Feditor%2Fb857682c-c1e9-4d6b-9baf-7c31d608c5fb.png" alt="image.png"></p><h2 style="color:#0090ff"><a id=3></a>三、Vim常用命令</h2><hr><p><img src="https://obs-emcsapp-public.obs.cn-north-4.myhwclouds.com/image%2Feditor%2F248e287d-fec9-4831-8dda-c5458829bae6.png" alt="image.png"></p><p><strong>OK，数数够不够100个！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> linux </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java招聘岗位分析</title>
      <link href="/decade2025/decade2025.github.io.git/2021/04/14/Java%E6%8B%9B%E8%81%98%E5%B2%97%E4%BD%8D%E5%88%86%E6%9E%90/"/>
      <url>/decade2025/decade2025.github.io.git/2021/04/14/Java%E6%8B%9B%E8%81%98%E5%B2%97%E4%BD%8D%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/decade2025/decade2025.github.io.git/assets/css/APlayer.min.css"><script src="/decade2025/decade2025.github.io.git/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、代码简单展示"><a href="#一、代码简单展示" class="headerlink" title="一、代码简单展示"></a>一、代码简单展示</h2><blockquote><p>数据获取、数据清洗、数据计算，整个流程使用python进行实现。</p></blockquote><p>部分代码如下：</p><p><img src="https://oss-emcsprod-public.modb.pro/image/editor/20210202-da53c4f4-04fd-44e0-8a59-5173f936b421.png" alt="image.png"></p><h2 id="二、学历要求"><a href="#二、学历要求" class="headerlink" title="二、学历要求"></a>二、学历要求</h2><blockquote><p>在招聘要求中，大多要求本科及以上学历，但是也有30%的招聘要求达到专科即可。</p></blockquote><p><img src="https://oss-emcsprod-public.modb.pro/image/editor/20210202-095363d3-4c39-4a1b-bc6c-8483062d2b0d.png" alt="image.png"></p><h2 id="三、薪资分布"><a href="#三、薪资分布" class="headerlink" title="三、薪资分布"></a>三、薪资分布</h2><blockquote><p>Java开发的薪资主要分布在10-20k, 也有38%的Java开发工资在5-10k,这部分应该主要是应届或初级java岗位，随着工作经验积累，普遍能达到10-20k,较为优秀的大佬也能达到40k以上。</p></blockquote><p><img src="https://oss-emcsprod-public.modb.pro/image/editor/20210202-69d1cfe8-2405-4cc5-b9c0-a9dad099862c.png" alt="image.png"></p><h2 id="四、工作年限需求分布"><a href="#四、工作年限需求分布" class="headerlink" title="四、工作年限需求分布"></a>四、工作年限需求分布</h2><blockquote><p>3-10年的Java开发是职场黄金期，此时一般都具有较为丰富的开发经验，比较受招聘公司的青睐。</p></blockquote><p><img src="https://oss-emcsprod-public.modb.pro/image/editor/20210202-4a1367da-a874-4033-9fc9-212448c77972.png" alt="image.png"></p><p>ps: 有人会问了，那十年以上的呢？去送外卖了吗？个人推测，现实也没有那么悲观，大多应该是10年经验转架构或者管理了，所以10年以上的纯java开发可能就会比较少了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 薪资 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql索引为什么采用B+树？索引为什么要自增？</title>
      <link href="/decade2025/decade2025.github.io.git/2021/04/14/Mysql%E7%B4%A2%E5%BC%95%E4%B8%BA%E4%BB%80%E4%B9%88%E9%87%87%E7%94%A8B-%E6%A0%91%EF%BC%9F%E7%B4%A2%E5%BC%95%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%87%AA%E5%A2%9E%EF%BC%9F/"/>
      <url>/decade2025/decade2025.github.io.git/2021/04/14/Mysql%E7%B4%A2%E5%BC%95%E4%B8%BA%E4%BB%80%E4%B9%88%E9%87%87%E7%94%A8B-%E6%A0%91%EF%BC%9F%E7%B4%A2%E5%BC%95%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%87%AA%E5%A2%9E%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/decade2025/decade2025.github.io.git/assets/css/APlayer.min.css"><script src="/decade2025/decade2025.github.io.git/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1、索引作用是什么？使用什么数据结构存储？"><a href="#1、索引作用是什么？使用什么数据结构存储？" class="headerlink" title="1、索引作用是什么？使用什么数据结构存储？"></a>1、索引作用是什么？使用什么数据结构存储？</h3><blockquote><p>【作用】：加快数据检索</p><p>【数据结构】：B+树</p></blockquote><h3 id="2、为什么使用B-树存储索引？"><a href="#2、为什么使用B-树存储索引？" class="headerlink" title="2、为什么使用B+树存储索引？"></a>2、为什么使用B+树存储索引？</h3><p><code>B+树减少了IO操作且底层节点是所有数据的有序排列，便于范围查找，排序查找，分组查找以及去重查找</code></p><blockquote><p>首先，索引存储是k-v格式的，即索引-行数据，那么常见可以选择的数据结构有：hash表、二叉树、B树、B+树。</p><p>【<strong>hash表</strong>】</p><p>需要很优良的hash算法避免数据散列带来的浪费空间和查询快慢不均匀，并且hash表是无序的，相当于全表扫描，但是由于hash是在内存中进行的，所以即使如此依旧很快，但是核心问题就是在内存中太消<code>耗内存</code>。</p><p>【<strong>二叉树</strong>】</p><p>每个节点只有2个子树，如果数据量很大的时候，那树的层级就很深，查找次数会很大，影响查询速率。</p></blockquote><blockquote><p>【<strong>B树</strong>】</p><p>B树相当于二叉树来说，每个节点可以有多个子树，这样就保证了层级较浅，查询效率提高，但是，由于索引数据存在磁盘，查询需要IO操作，IO操作相对内存来说是非常慢的，因此需要尽量减少IO操作次数，因此读取数据是按照磁盘块(文件系统读写数据的最小单位)读取，而Innodb中页(内存的最小存储单位。页的大小通常为磁盘块大小的 2^n 倍)的默认大小是16kb，由于B树的页中存储的是k-v，大大降低了页中存储的索引数，因此，增加了IO操作次数，降低了查询效率。另外，B树的数据分散在各个节点，要实现范围查找，排序查找，分组查找以及去重查找相对较复杂，也降低了速率。</p></blockquote><p><img src="https://oss-emcsprod-public.modb.pro/image/editor/20210410-217ec084-618b-4d6b-bcf9-a80020bc0840.png" alt="image.png"></p><blockquote><p>【<strong>B+树</strong>】</p><p>B+树除底层页以外，页中只存k，这样单页中就能存储更多的索引值，减少了IO操作，从而加快了查询速率。</p><p>因为B+树索引的所有数据均存储在叶子节点，而且数据是按照顺序排列的。那么B+树使得范围查找，排序查找，分组查找以及去重查找变得异常简单。  </p><p>这样如果我们的B+树一个节点可以存储1000个键值，那么3层B+树可以存储1000×1000×1000=10亿个数据。一般根节点是常驻内存的，所以一般我们查找10亿数据，只需要2次磁盘IO。</p></blockquote><p><img src="https://oss-emcsprod-public.modb.pro/image/editor/20210410-46ca4211-353d-4fad-8768-2a42f4d928b9.png" alt="image.png"></p><h3 id="3、索引用int还是varchar？"><a href="#3、索引用int还是varchar？" class="headerlink" title="3、索引用int还是varchar？"></a>3、索引用int还是varchar？</h3><blockquote><p>用Int因为int占用字节较小，根节点可以存储更多的key(索引值)</p></blockquote><h3 id="4、索引要不要自增？为什么？"><a href="#4、索引要不要自增？为什么？" class="headerlink" title="4、索引要不要自增？为什么？"></a>4、索引要不要自增？为什么？</h3><blockquote><p>要</p><p>索引自增可以减少分裂。如果不是自增的，那索引值是无序的，但是B+树底层节点是排序的，因此当需要插入的页满了，则需要分裂为两个页，上层也需要做出相应变化。而如果是自增的，那只需要往后追加，不会影响前面的数据。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python日志库logging的使用</title>
      <link href="/decade2025/decade2025.github.io.git/2021/04/14/Python%E6%97%A5%E5%BF%97%E5%BA%93logging%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/decade2025/decade2025.github.io.git/2021/04/14/Python%E6%97%A5%E5%BF%97%E5%BA%93logging%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/decade2025/decade2025.github.io.git/assets/css/APlayer.min.css"><script src="/decade2025/decade2025.github.io.git/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、创建日志配置类"><a href="#一、创建日志配置类" class="headerlink" title="一、创建日志配置类"></a>一、创建日志配置类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"># encoding&#x3D;utf-8</span><br><span class="line">import logging</span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建存储日志的路径</span><br><span class="line">log_path &#x3D; os.getcwd()</span><br><span class="line">class Log(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 文件的命名</span><br><span class="line">        self.logname &#x3D; os.path.join(log_path, &#39;%s.log&#39; % time.strftime(&#39;%Y_%m_%d&#39;))</span><br><span class="line">        # 创建日志对象</span><br><span class="line">        self.logger &#x3D; logging.getLogger(__name__)</span><br><span class="line">        self.logger.setLevel(logging.DEBUG)</span><br><span class="line">        # 日志输出格式</span><br><span class="line">        self.formatter &#x3D; logging.Formatter(&#39;[%(asctime)s] - %(filename)s] - %(levelname)s: %(message)s&#39;)</span><br><span class="line"></span><br><span class="line">    def config(self, level, message):</span><br><span class="line">        # 创建一个FileHandler，用于写到本地</span><br><span class="line">        file_handler &#x3D; logging.FileHandler(self.logname, &#39;a&#39;, encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">        file_handler.setLevel(logging.DEBUG) # 设置等级</span><br><span class="line">        file_handler.setFormatter(self.formatter) # 把输出格式加入输出方式</span><br><span class="line">        self.logger.addHandler(file_handler) # 把以上设置加入对象</span><br><span class="line"></span><br><span class="line">        # 创建一个StreamHandler,用于输出到控制台</span><br><span class="line">        stream_handler &#x3D; logging.StreamHandler()</span><br><span class="line">        stream_handler.setLevel(logging.DEBUG)</span><br><span class="line">        stream_handler.setFormatter(self.formatter)</span><br><span class="line">        self.logger.addHandler(stream_handler)</span><br><span class="line"></span><br><span class="line">        if level &#x3D;&#x3D; &#39;info&#39;:</span><br><span class="line">            self.logger.info(message)</span><br><span class="line">        elif level &#x3D;&#x3D; &#39;debug&#39;:</span><br><span class="line">            self.logger.debug(message)</span><br><span class="line">        elif level &#x3D;&#x3D; &#39;warning&#39;:</span><br><span class="line">            self.logger.warning(message)</span><br><span class="line">        elif level &#x3D;&#x3D; &#39;error&#39;:</span><br><span class="line">            self.logger.error(message)</span><br><span class="line">        # 这两行代码是为了避免日志输出重复问题</span><br><span class="line">        self.logger.removeHandler(file_handler)</span><br><span class="line">        self.logger.removeHandler(stream_handler)</span><br><span class="line">        # 关闭打开的文件</span><br><span class="line">        file_handler.close()</span><br><span class="line"></span><br><span class="line">    def debug(self, message):</span><br><span class="line">        self.__console(&#39;debug&#39;, message)</span><br><span class="line"></span><br><span class="line">    def info(self, message):</span><br><span class="line">        self.__console(&#39;info&#39;, message)</span><br><span class="line"></span><br><span class="line">    def warning(self, message):</span><br><span class="line">        self.__console(&#39;warning&#39;, message)</span><br><span class="line"></span><br><span class="line">    def error(self, message):</span><br><span class="line">        self.__console(&#39;error&#39;, message)</span><br></pre></td></tr></table></figure><blockquote><p><strong>日志输出格式参数</strong><br>%(levelno)s：打印日志级别的数值<br>%(levelname)s：打印日志级别的名称<br>%(pathname)s：打印当前执行程序的路径，其实就是sys.argv[0]<br>%(filename)s：打印当前执行程序名<br>%(funcName)s：打印日志的当前函数<br>%(lineno)d：打印日志的当前行号<br>%(asctime)s：打印日志的时间<br>%(thread)d：打印线程ID<br>%(threadName)s：打印线程名称<br>%(process)d：打印进程ID<br>%(message)s：打印日志信息</p></blockquote><h2 id="二、使用日志"><a href="#二、使用日志" class="headerlink" title="二、使用日志"></a>二、使用日志</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from log_init import Log </span><br><span class="line">log.info(“这是个Info日志&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> python开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解:https加密方式</title>
      <link href="/decade2025/decade2025.github.io.git/2021/04/14/%E5%9B%BE%E8%A7%A3-https%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F/"/>
      <url>/decade2025/decade2025.github.io.git/2021/04/14/%E5%9B%BE%E8%A7%A3-https%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/decade2025/decade2025.github.io.git/assets/css/APlayer.min.css"><script src="/decade2025/decade2025.github.io.git/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1、密码学要解决的三大问题"><a href="#1-1、密码学要解决的三大问题" class="headerlink" title="1.1、密码学要解决的三大问题"></a>1.1、密码学要解决的三大问题</h3><blockquote><ul><li><p>加密、防止被窃听</p></li><li><p>验证通信人的身份</p></li><li><p>内容没有被篡改</p></li></ul></blockquote><h3 id="1-2、Http的缺点"><a href="#1-2、Http的缺点" class="headerlink" title="1.2、Http的缺点"></a>1.2、Http的缺点</h3><blockquote><p>http传输信息是不加密的，因此密码学要解决的三大问题它都存在</p></blockquote><img src="https://oss-emcsprod-public.modb.pro/image/editor/20210412-ae89a849-e9c7-4368-901b-278c73283559.png" alt="image.png" style="zoom:50%;" /><h3 id="1-3、常见加密方式"><a href="#1-3、常见加密方式" class="headerlink" title="1.3、常见加密方式"></a>1.3、常见加密方式</h3><blockquote><p>在学习HTTPS加密方式之前，有必要了解几种常见的加密方式，如：</p><ul><li>对称加密</li><li>非对称加密</li></ul></blockquote><h2 id="二、常见加密方式"><a href="#二、常见加密方式" class="headerlink" title="二、常见加密方式"></a>二、常见加密方式</h2><h3 id="2-1、对称加密"><a href="#2-1、对称加密" class="headerlink" title="2.1、对称加密"></a>2.1、对称加密</h3><h4 id="2-1-1、对称加密精要"><a href="#2-1-1、对称加密精要" class="headerlink" title="2.1.1、对称加密精要"></a>2.1.1、对称加密精要</h4><blockquote><p>通信双方使用<code>同一个秘钥</code>，进行加密解密数据</p></blockquote><h4 id="2-1-2、图解具体实现"><a href="#2-1-2、图解具体实现" class="headerlink" title="2.1.2、图解具体实现"></a>2.1.2、图解具体实现</h4><img src="https://oss-emcsprod-public.modb.pro/image/editor/20210412-c22bd959-adef-4a6a-9e33-d9ff61265e01.png" alt="image.png" style="zoom:50%;" /><h4 id="2-1-3、优缺点"><a href="#2-1-3、优缺点" class="headerlink" title="2.1.3、优缺点"></a>2.1.3、优缺点</h4><blockquote><p>【优势】</p><p>计算量小、加密速度快、加密效率高</p><p>【弊端】</p><p>用户拿到秘钥即可随意获取和修改传输内容（不安全）</p></blockquote><h3 id="2-2、非对称加密"><a href="#2-2、非对称加密" class="headerlink" title="2.2、非对称加密"></a>2.2、非对称加密</h3><h4 id="2-2-1、非对称加密精要"><a href="#2-2-1、非对称加密精要" class="headerlink" title="2.2.1、非对称加密精要"></a>2.2.1、非对称加密精要</h4><blockquote><p>传输双方均有自己的<code>一对密钥</code>（也就是双方每方均有：公、私密钥各一把，双方加起来共4把），使用公钥加密的只能用私钥解密，使用私钥加密的数据只能用公钥解密。</p><p>因为<code>加密和解密</code>使用的是<code>两个不同的密钥</code>，所以这种算法叫作非对称加密算法。</p></blockquote><h4 id="2-2-2、图解具体实现"><a href="#2-2-2、图解具体实现" class="headerlink" title="2.2.2、图解具体实现"></a>2.2.2、图解具体实现</h4><img src="https://oss-emcsprod-public.modb.pro/image/editor/20210412-0e4492b2-5642-43e9-b137-4c4c8c85a272.png" alt="image.png" style="zoom:50%;" /><h4 id="2-2-3、优缺点"><a href="#2-2-3、优缺点" class="headerlink" title="2.2.3、优缺点"></a>2.2.3、优缺点</h4><blockquote><p>【优势】</p><p>比对称加密安全性高</p><p>【弊端】</p><p>传输公钥时，公钥被替换，则可以随意获取和修改传输内容</p></blockquote><h2 id="三、证书"><a href="#三、证书" class="headerlink" title="三、证书"></a>三、证书</h2><h3 id="3-1、概述"><a href="#3-1、概述" class="headerlink" title="3.1、概述"></a>3.1、概述</h3><ul><li><strong>非对称加密的核心问题</strong></li></ul><blockquote><p>非对称性加密之所以不安全，是应为客户端不知道，这把公钥是不是服务器的。因此，我们需要找到一种策略来证明这把公钥就是服务器的，而不是别人冒充的。</p></blockquote><ul><li><strong>证书</strong></li></ul><blockquote><p>证书是需要<code>申请</code>的，并由专门的<code>数字证书认证机构(CA)</code>通过非常严格的审核之后颁发的电子证书 (当然了是要钱的，安全级别越高价格越贵)。</p><p>颁发证书的同时会产生一个<code>私钥和公钥</code>。私钥由服务端自己保存，不可泄漏。公钥则是附带在证书的信息中，可以公开的。证书本身也附带一个证书电子<code>签名</code>，这个签名用来验证证书的完整性和真实性，可以<code>防止证书被篡改</code>。</p></blockquote><h3 id="3-2、查看网站证书"><a href="#3-2、查看网站证书" class="headerlink" title="3.2、查看网站证书"></a>3.2、查看网站证书</h3><blockquote><p>Chrome 浏览器点击<code>地址栏</code>的<code>锁标志</code>再点击<code>证书</code>可以看到证书详细信息</p></blockquote><img src="https://oss-emcsprod-public.modb.pro/image/editor/20210412-2f18d206-a941-497b-8fcc-c009d1a53a3d.png" alt="image.png" style="zoom:50%;" /><h3 id="3-3、证书验证失败-证书过期"><a href="#3-3、证书验证失败-证书过期" class="headerlink" title="3.3、证书验证失败/证书过期"></a>3.3、证书验证失败/证书过期</h3><img src="https://oss-emcsprod-public.modb.pro/image/editor/20210412-f9a5dc91-6bf8-4ee4-9751-1cc79a106f09.png" alt="image.png" style="zoom:40%;" /><h2 id="四、Https加密方式"><a href="#四、Https加密方式" class="headerlink" title="四、Https加密方式"></a>四、Https加密方式</h2><h3 id="4-1、Https加密精要"><a href="#4-1、Https加密精要" class="headerlink" title="4.1、Https加密精要"></a>4.1、Https加密精要</h3><blockquote><p>采用<code>非对称加密</code>方式发送对称加密的秘钥，采用<code>证书</code>判定公钥是不是服务器的，采用<code>对称加密</code>的方式传输数据。</p></blockquote><h3 id="4-2、图解具体实现"><a href="#4-2、图解具体实现" class="headerlink" title="4.2、图解具体实现"></a>4.2、图解具体实现</h3><p><img src="https://oss-emcsprod-public.modb.pro/image/editor/20210412-3d94b8ca-9409-4d0f-bfe7-7b38b967eee2.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
